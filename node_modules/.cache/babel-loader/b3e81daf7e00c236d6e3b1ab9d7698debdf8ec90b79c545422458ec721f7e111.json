{"ast":null,"code":"import { useEffect, useRef } from 'react';\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nvar getCircularReplacer = function getCircularReplacer() {\n  var seen = new WeakSet();\n  return function (key, value) {\n    if (_typeof(value) === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n/**\r\n * 一个更加安全的 stringify，可以解决循环依赖的问题\r\n * @param value\r\n */\n\nvar stringify = function stringify(value) {\n  return JSON.stringify(value, getCircularReplacer());\n};\nvar jsonCompareEquals = function jsonCompareEquals(value, nextValue) {\n  try {\n    return stringify(value) === stringify(nextValue);\n  } catch (error) {// do something\n  }\n  return false;\n};\nfunction useJsonCompareMemoize(value) {\n  var ref = useRef(''); // it can be done by using useMemo as well\n  // but useRef is rather cleaner and easier\n\n  if (!jsonCompareEquals(value, ref.current)) {\n    ref.current = JSON.stringify(value, getCircularReplacer());\n  }\n  return ref.current;\n}\nfunction useDeepJSONEffect(effect, dependencies) {\n  useEffect(effect, [useJsonCompareMemoize(dependencies)]);\n}\nexport default useDeepJSONEffect;\nexport { stringify };","map":{"version":3,"names":["useEffect","useRef","_typeof","obj","Symbol","iterator","constructor","prototype","getCircularReplacer","seen","WeakSet","key","value","has","add","stringify","JSON","jsonCompareEquals","nextValue","error","useJsonCompareMemoize","ref","current","useDeepJSONEffect","effect","dependencies"],"sources":["D:/LearnDeveloper/ReactJS/student-management-infor/node_modules/use-json-comparison/dist/index.esm.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar getCircularReplacer = function getCircularReplacer() {\n  var seen = new WeakSet();\n  return function (key, value) {\n    if (_typeof(value) === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n\n      seen.add(value);\n    }\n\n    return value;\n  };\n};\n/**\r\n * 一个更加安全的 stringify，可以解决循环依赖的问题\r\n * @param value\r\n */\n\n\nvar stringify = function stringify(value) {\n  return JSON.stringify(value, getCircularReplacer());\n};\n\nvar jsonCompareEquals = function jsonCompareEquals(value, nextValue) {\n  try {\n    return stringify(value) === stringify(nextValue);\n  } catch (error) {// do something\n  }\n\n  return false;\n};\n\nfunction useJsonCompareMemoize(value) {\n  var ref = useRef(''); // it can be done by using useMemo as well\n  // but useRef is rather cleaner and easier\n\n  if (!jsonCompareEquals(value, ref.current)) {\n    ref.current = JSON.stringify(value, getCircularReplacer());\n  }\n\n  return ref.current;\n}\nfunction useDeepJSONEffect(effect, dependencies) {\n  useEffect(effect, [useJsonCompareMemoize(dependencies)]);\n}\n\nexport default useDeepJSONEffect;\nexport { stringify };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,SAASC,OAAOA,CAACC,GAAG,EAAE;EACpB,yBAAyB;;EAEzB,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,QAAQ,EAAE;IACvEH,OAAO,GAAG,SAAAA,CAAUC,GAAG,EAAE;MACvB,OAAO,OAAOA,GAAG;IACnB,CAAC;EACH,CAAC,MAAM;IACLD,OAAO,GAAG,SAAAA,CAAUC,GAAG,EAAE;MACvB,OAAOA,GAAG,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAID,GAAG,CAACG,WAAW,KAAKF,MAAM,IAAID,GAAG,KAAKC,MAAM,CAACG,SAAS,GAAG,QAAQ,GAAG,OAAOJ,GAAG;IAC9H,CAAC;EACH;EAEA,OAAOD,OAAO,CAACC,GAAG,CAAC;AACrB;AAEA,IAAIK,mBAAmB,GAAG,SAASA,mBAAmBA,CAAA,EAAG;EACvD,IAAIC,IAAI,GAAG,IAAIC,OAAO,EAAE;EACxB,OAAO,UAAUC,GAAG,EAAEC,KAAK,EAAE;IAC3B,IAAIV,OAAO,CAACU,KAAK,CAAC,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;MACjD,IAAIH,IAAI,CAACI,GAAG,CAACD,KAAK,CAAC,EAAE;QACnB;MACF;MAEAH,IAAI,CAACK,GAAG,CAACF,KAAK,CAAC;IACjB;IAEA,OAAOA,KAAK;EACd,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;;AAGA,IAAIG,SAAS,GAAG,SAASA,SAASA,CAACH,KAAK,EAAE;EACxC,OAAOI,IAAI,CAACD,SAAS,CAACH,KAAK,EAAEJ,mBAAmB,EAAE,CAAC;AACrD,CAAC;AAED,IAAIS,iBAAiB,GAAG,SAASA,iBAAiBA,CAACL,KAAK,EAAEM,SAAS,EAAE;EACnE,IAAI;IACF,OAAOH,SAAS,CAACH,KAAK,CAAC,KAAKG,SAAS,CAACG,SAAS,CAAC;EAClD,CAAC,CAAC,OAAOC,KAAK,EAAE,CAAC;EAAA;EAGjB,OAAO,KAAK;AACd,CAAC;AAED,SAASC,qBAAqBA,CAACR,KAAK,EAAE;EACpC,IAAIS,GAAG,GAAGpB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;EACtB;;EAEA,IAAI,CAACgB,iBAAiB,CAACL,KAAK,EAAES,GAAG,CAACC,OAAO,CAAC,EAAE;IAC1CD,GAAG,CAACC,OAAO,GAAGN,IAAI,CAACD,SAAS,CAACH,KAAK,EAAEJ,mBAAmB,EAAE,CAAC;EAC5D;EAEA,OAAOa,GAAG,CAACC,OAAO;AACpB;AACA,SAASC,iBAAiBA,CAACC,MAAM,EAAEC,YAAY,EAAE;EAC/CzB,SAAS,CAACwB,MAAM,EAAE,CAACJ,qBAAqB,CAACK,YAAY,CAAC,CAAC,CAAC;AAC1D;AAEA,eAAeF,iBAAiB;AAChC,SAASR,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}