{"ast":null,"code":"/* eslint-disable no-redeclare */\n\n/* eslint-disable no-multi-assign */\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable no-new-wrappers */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable no-var */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable prefer-destructuring */\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/* eslint-disable block-scoped-var */\n\n/* eslint-disable vars-on-top */\n\n/* eslint-disable no-bitwise */\n\n/* eslint-disable no-cond-assign */\n\n/*\n * A JavaScript implementation of the SHA256 hash function.\n *\n * FILE:\tsha256.js\n * VERSION:\t0.8\n * AUTHOR:\tChristoph Bichlmeier <informatik@zombiearena.de>\n *\n * NOTE: This version is not tested thoroughly!\n *\n * Copyright (c) 2003, Christoph Bichlmeier\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holder nor the names of contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * ======================================================================\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* SHA256 logical functions */\nfunction rotateRight(n, x) {\n  return x >>> n | x << 32 - n;\n}\nfunction choice(x, y, z) {\n  return x & y ^ ~x & z;\n}\nfunction majority(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\nfunction sha256_Sigma0(x) {\n  return rotateRight(2, x) ^ rotateRight(13, x) ^ rotateRight(22, x);\n}\nfunction sha256_Sigma1(x) {\n  return rotateRight(6, x) ^ rotateRight(11, x) ^ rotateRight(25, x);\n}\nfunction sha256_sigma0(x) {\n  return rotateRight(7, x) ^ rotateRight(18, x) ^ x >>> 3;\n}\nfunction sha256_sigma1(x) {\n  return rotateRight(17, x) ^ rotateRight(19, x) ^ x >>> 10;\n}\nfunction sha256_expand(W, j) {\n  return W[j & 0x0f] += sha256_sigma1(W[j + 14 & 0x0f]) + W[j + 9 & 0x0f] + sha256_sigma0(W[j + 1 & 0x0f]);\n}\n/* Hash constant words K: */\n\nvar K256 = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n/* global arrays */\n\nvar ihash;\nvar count;\nvar buffer;\nvar sha256_hex_digits = '0123456789abcdef';\n/* Add 32-bit integers with 16-bit operations (bug in some JS-interpreters:\noverflow) */\n\nfunction safe_add(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/* Initialise the SHA256 computation */\n\nfunction sha256_init() {\n  ihash = new Array(8);\n  count = new Array(2);\n  buffer = new Array(64);\n  count[0] = count[1] = 0;\n  ihash[0] = 0x6a09e667;\n  ihash[1] = 0xbb67ae85;\n  ihash[2] = 0x3c6ef372;\n  ihash[3] = 0xa54ff53a;\n  ihash[4] = 0x510e527f;\n  ihash[5] = 0x9b05688c;\n  ihash[6] = 0x1f83d9ab;\n  ihash[7] = 0x5be0cd19;\n}\n/* Transform a 512-bit message block */\n\nfunction sha256_transform() {\n  var a;\n  var b;\n  var c;\n  var d;\n  var e;\n  var f;\n  var g;\n  var h;\n  var T1;\n  var T2;\n  var W = new Array(16);\n  /* Initialize registers with the previous intermediate value */\n\n  a = ihash[0];\n  b = ihash[1];\n  c = ihash[2];\n  d = ihash[3];\n  e = ihash[4];\n  f = ihash[5];\n  g = ihash[6];\n  h = ihash[7];\n  /* make 32-bit words */\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = buffer[(i << 2) + 3] | buffer[(i << 2) + 2] << 8 | buffer[(i << 2) + 1] << 16 | buffer[i << 2] << 24;\n  }\n  for (var j = 0; j < 64; j++) {\n    T1 = h + sha256_Sigma1(e) + choice(e, f, g) + K256[j];\n    if (j < 16) T1 += W[j];else T1 += sha256_expand(W, j);\n    T2 = sha256_Sigma0(a) + majority(a, b, c);\n    h = g;\n    g = f;\n    f = e;\n    e = safe_add(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = safe_add(T1, T2);\n  }\n  /* Compute the current intermediate hash value */\n\n  ihash[0] += a;\n  ihash[1] += b;\n  ihash[2] += c;\n  ihash[3] += d;\n  ihash[4] += e;\n  ihash[5] += f;\n  ihash[6] += g;\n  ihash[7] += h;\n}\n/* Read the next chunk of data and update the SHA256 computation */\n\nfunction sha256_update(data, inputLen) {\n  var i;\n  var index;\n  var curpos = 0;\n  /* Compute number of bytes mod 64 */\n\n  index = count[0] >> 3 & 0x3f;\n  var remainder = inputLen & 0x3f;\n  /* Update number of bits */\n\n  if ((count[0] += inputLen << 3) < inputLen << 3) count[1]++;\n  count[1] += inputLen >> 29;\n  /* Transform as many times as possible */\n\n  for (i = 0; i + 63 < inputLen; i += 64) {\n    for (var j = index; j < 64; j++) {\n      buffer[j] = data.charCodeAt(curpos++);\n    }\n    sha256_transform();\n    index = 0;\n  }\n  /* Buffer remaining input */\n\n  for (var _j = 0; _j < remainder; _j++) {\n    buffer[_j] = data.charCodeAt(curpos++);\n  }\n}\n/* Finish the computation by operations such as padding */\n\nfunction sha256_final() {\n  var index = count[0] >> 3 & 0x3f;\n  buffer[index++] = 0x80;\n  if (index <= 56) {\n    for (var i = index; i < 56; i++) {\n      buffer[i] = 0;\n    }\n  } else {\n    for (var _i = index; _i < 64; _i++) {\n      buffer[_i] = 0;\n    }\n    sha256_transform();\n    for (var _i2 = 0; _i2 < 56; _i2++) {\n      buffer[_i2] = 0;\n    }\n  }\n  buffer[56] = count[1] >>> 24 & 0xff;\n  buffer[57] = count[1] >>> 16 & 0xff;\n  buffer[58] = count[1] >>> 8 & 0xff;\n  buffer[59] = count[1] & 0xff;\n  buffer[60] = count[0] >>> 24 & 0xff;\n  buffer[61] = count[0] >>> 16 & 0xff;\n  buffer[62] = count[0] >>> 8 & 0xff;\n  buffer[63] = count[0] & 0xff;\n  sha256_transform();\n}\n/* Split the internal hash values into an array of bytes */\n\nfunction sha256_encode_bytes() {\n  var j = 0;\n  var output = new Array(32);\n  for (var i = 0; i < 8; i++) {\n    output[j++] = ihash[i] >>> 24 & 0xff;\n    output[j++] = ihash[i] >>> 16 & 0xff;\n    output[j++] = ihash[i] >>> 8 & 0xff;\n    output[j++] = ihash[i] & 0xff;\n  }\n  return output;\n}\n/* Get the internal hash as a hex string */\n\nfunction sha256_encode_hex() {\n  var output = new String();\n  for (var i = 0; i < 8; i++) {\n    for (var j = 28; j >= 0; j -= 4) {\n      output += sha256_hex_digits.charAt(ihash[i] >>> j & 0x0f);\n    }\n  }\n  return output;\n}\n/* Main function: returns a hex string representing the SHA256 value of the\ngiven data */\n\nfunction digest(data) {\n  sha256_init();\n  sha256_update(data, data.length);\n  sha256_final();\n  return sha256_encode_hex();\n}\nexport default digest;","map":{"version":3,"names":["rotateRight","n","x","choice","y","z","majority","sha256_Sigma0","sha256_Sigma1","sha256_sigma0","sha256_sigma1","sha256_expand","W","j","K256","ihash","count","buffer","sha256_hex_digits","safe_add","lsw","msw","sha256_init","Array","sha256_transform","a","b","c","d","e","f","g","h","T1","T2","i","sha256_update","data","inputLen","index","curpos","remainder","charCodeAt","_j","sha256_final","_i","_i2","sha256_encode_bytes","output","sha256_encode_hex","String","charAt","digest","length"],"sources":["D:/LearnDeveloper/ReactJS/student-management-infor/node_modules/@umijs/route-utils/es/sha265.js"],"sourcesContent":["/* eslint-disable no-redeclare */\n\n/* eslint-disable no-multi-assign */\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable no-new-wrappers */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable no-var */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable prefer-destructuring */\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/* eslint-disable block-scoped-var */\n\n/* eslint-disable vars-on-top */\n\n/* eslint-disable no-bitwise */\n\n/* eslint-disable no-cond-assign */\n\n/*\n * A JavaScript implementation of the SHA256 hash function.\n *\n * FILE:\tsha256.js\n * VERSION:\t0.8\n * AUTHOR:\tChristoph Bichlmeier <informatik@zombiearena.de>\n *\n * NOTE: This version is not tested thoroughly!\n *\n * Copyright (c) 2003, Christoph Bichlmeier\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holder nor the names of contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * ======================================================================\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* SHA256 logical functions */\nfunction rotateRight(n, x) {\n  return x >>> n | x << 32 - n;\n}\n\nfunction choice(x, y, z) {\n  return x & y ^ ~x & z;\n}\n\nfunction majority(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\n\nfunction sha256_Sigma0(x) {\n  return rotateRight(2, x) ^ rotateRight(13, x) ^ rotateRight(22, x);\n}\n\nfunction sha256_Sigma1(x) {\n  return rotateRight(6, x) ^ rotateRight(11, x) ^ rotateRight(25, x);\n}\n\nfunction sha256_sigma0(x) {\n  return rotateRight(7, x) ^ rotateRight(18, x) ^ x >>> 3;\n}\n\nfunction sha256_sigma1(x) {\n  return rotateRight(17, x) ^ rotateRight(19, x) ^ x >>> 10;\n}\n\nfunction sha256_expand(W, j) {\n  return W[j & 0x0f] += sha256_sigma1(W[j + 14 & 0x0f]) + W[j + 9 & 0x0f] + sha256_sigma0(W[j + 1 & 0x0f]);\n}\n/* Hash constant words K: */\n\n\nvar K256 = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n/* global arrays */\n\nvar ihash;\nvar count;\nvar buffer;\nvar sha256_hex_digits = '0123456789abcdef';\n/* Add 32-bit integers with 16-bit operations (bug in some JS-interpreters:\noverflow) */\n\nfunction safe_add(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/* Initialise the SHA256 computation */\n\n\nfunction sha256_init() {\n  ihash = new Array(8);\n  count = new Array(2);\n  buffer = new Array(64);\n  count[0] = count[1] = 0;\n  ihash[0] = 0x6a09e667;\n  ihash[1] = 0xbb67ae85;\n  ihash[2] = 0x3c6ef372;\n  ihash[3] = 0xa54ff53a;\n  ihash[4] = 0x510e527f;\n  ihash[5] = 0x9b05688c;\n  ihash[6] = 0x1f83d9ab;\n  ihash[7] = 0x5be0cd19;\n}\n/* Transform a 512-bit message block */\n\n\nfunction sha256_transform() {\n  var a;\n  var b;\n  var c;\n  var d;\n  var e;\n  var f;\n  var g;\n  var h;\n  var T1;\n  var T2;\n  var W = new Array(16);\n  /* Initialize registers with the previous intermediate value */\n\n  a = ihash[0];\n  b = ihash[1];\n  c = ihash[2];\n  d = ihash[3];\n  e = ihash[4];\n  f = ihash[5];\n  g = ihash[6];\n  h = ihash[7];\n  /* make 32-bit words */\n\n  for (var i = 0; i < 16; i++) {\n    W[i] = buffer[(i << 2) + 3] | buffer[(i << 2) + 2] << 8 | buffer[(i << 2) + 1] << 16 | buffer[i << 2] << 24;\n  }\n\n  for (var j = 0; j < 64; j++) {\n    T1 = h + sha256_Sigma1(e) + choice(e, f, g) + K256[j];\n    if (j < 16) T1 += W[j];else T1 += sha256_expand(W, j);\n    T2 = sha256_Sigma0(a) + majority(a, b, c);\n    h = g;\n    g = f;\n    f = e;\n    e = safe_add(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = safe_add(T1, T2);\n  }\n  /* Compute the current intermediate hash value */\n\n\n  ihash[0] += a;\n  ihash[1] += b;\n  ihash[2] += c;\n  ihash[3] += d;\n  ihash[4] += e;\n  ihash[5] += f;\n  ihash[6] += g;\n  ihash[7] += h;\n}\n/* Read the next chunk of data and update the SHA256 computation */\n\n\nfunction sha256_update(data, inputLen) {\n  var i;\n  var index;\n  var curpos = 0;\n  /* Compute number of bytes mod 64 */\n\n  index = count[0] >> 3 & 0x3f;\n  var remainder = inputLen & 0x3f;\n  /* Update number of bits */\n\n  if ((count[0] += inputLen << 3) < inputLen << 3) count[1]++;\n  count[1] += inputLen >> 29;\n  /* Transform as many times as possible */\n\n  for (i = 0; i + 63 < inputLen; i += 64) {\n    for (var j = index; j < 64; j++) {\n      buffer[j] = data.charCodeAt(curpos++);\n    }\n\n    sha256_transform();\n    index = 0;\n  }\n  /* Buffer remaining input */\n\n\n  for (var _j = 0; _j < remainder; _j++) {\n    buffer[_j] = data.charCodeAt(curpos++);\n  }\n}\n/* Finish the computation by operations such as padding */\n\n\nfunction sha256_final() {\n  var index = count[0] >> 3 & 0x3f;\n  buffer[index++] = 0x80;\n\n  if (index <= 56) {\n    for (var i = index; i < 56; i++) {\n      buffer[i] = 0;\n    }\n  } else {\n    for (var _i = index; _i < 64; _i++) {\n      buffer[_i] = 0;\n    }\n\n    sha256_transform();\n\n    for (var _i2 = 0; _i2 < 56; _i2++) {\n      buffer[_i2] = 0;\n    }\n  }\n\n  buffer[56] = count[1] >>> 24 & 0xff;\n  buffer[57] = count[1] >>> 16 & 0xff;\n  buffer[58] = count[1] >>> 8 & 0xff;\n  buffer[59] = count[1] & 0xff;\n  buffer[60] = count[0] >>> 24 & 0xff;\n  buffer[61] = count[0] >>> 16 & 0xff;\n  buffer[62] = count[0] >>> 8 & 0xff;\n  buffer[63] = count[0] & 0xff;\n  sha256_transform();\n}\n/* Split the internal hash values into an array of bytes */\n\n\nfunction sha256_encode_bytes() {\n  var j = 0;\n  var output = new Array(32);\n\n  for (var i = 0; i < 8; i++) {\n    output[j++] = ihash[i] >>> 24 & 0xff;\n    output[j++] = ihash[i] >>> 16 & 0xff;\n    output[j++] = ihash[i] >>> 8 & 0xff;\n    output[j++] = ihash[i] & 0xff;\n  }\n\n  return output;\n}\n/* Get the internal hash as a hex string */\n\n\nfunction sha256_encode_hex() {\n  var output = new String();\n\n  for (var i = 0; i < 8; i++) {\n    for (var j = 28; j >= 0; j -= 4) {\n      output += sha256_hex_digits.charAt(ihash[i] >>> j & 0x0f);\n    }\n  }\n\n  return output;\n}\n/* Main function: returns a hex string representing the SHA256 value of the\ngiven data */\n\n\nfunction digest(data) {\n  sha256_init();\n  sha256_update(data, data.length);\n  sha256_final();\n  return sha256_encode_hex();\n}\n\nexport default digest;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}