{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\n/**\n * @param  {string} s\n */\nvar isWildcard = function isWildcard(s) {\n  return s === '*' || s === 'x' || s === 'X';\n};\n/**\n * @param  {string} v\n */\nvar tryParse = function tryParse(v) {\n  var n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n/**\n * @param  {string|number} a\n * @param  {string|number} b\n */\nvar forceType = function forceType(a, b) {\n  return _typeof(a) !== _typeof(b) ? [String(a), String(b)] : [a, b];\n};\n\n/**\n * @param  {string} a\n * @param  {string} b\n * @returns number\n */\nvar compareStrings = function compareStrings(a, b) {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  var _forceType = forceType(tryParse(a), tryParse(b)),\n    _forceType2 = _slicedToArray(_forceType, 2),\n    ap = _forceType2[0],\n    bp = _forceType2[1];\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n/**\n * @param  {string|RegExpMatchArray} a\n * @param  {string|RegExpMatchArray} b\n * @returns number\n */\nvar compareSegments = function compareSegments(a, b) {\n  for (var i = 0; i < Math.max(a.length, b.length); i++) {\n    var r = compareStrings(a[i] || '0', b[i] || '0');\n    if (r !== 0) return r;\n  }\n  return 0;\n};\n/**\n * @param  {string} version\n * @returns RegExpMatchArray\n */\nvar validateAndParse = function validateAndParse(version) {\n  var _match$shift;\n  var match = version.match(semver);\n  match === null || match === void 0 ? void 0 : (_match$shift = match.shift) === null || _match$shift === void 0 ? void 0 : _match$shift.call(match);\n  return match;\n};\n\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nexport var compareVersions = function compareVersions(v1, v2) {\n  // validate input and split into segments\n  var n1 = validateAndParse(v1);\n  var n2 = validateAndParse(v2);\n\n  // pop off the patch\n  var p1 = n1.pop();\n  var p2 = n2.pop();\n\n  // validate numbers\n  var r = compareSegments(n1, n2);\n  if (r !== 0) return r;\n  if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n  return 0;\n};","map":{"version":3,"names":["_slicedToArray","_typeof","semver","isWildcard","s","tryParse","v","n","parseInt","isNaN","forceType","a","b","String","compareStrings","_forceType","_forceType2","ap","bp","compareSegments","i","Math","max","length","r","validateAndParse","version","_match$shift","match","shift","call","compareVersions","v1","v2","n1","n2","p1","pop","p2"],"sources":["D:/LearnDeveloper/ReactJS/student-management-infor/node_modules/@ant-design/pro-utils/es/compareVersions/index.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\n/**\n * @param  {string} s\n */\nvar isWildcard = function isWildcard(s) {\n  return s === '*' || s === 'x' || s === 'X';\n};\n/**\n * @param  {string} v\n */\nvar tryParse = function tryParse(v) {\n  var n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n/**\n * @param  {string|number} a\n * @param  {string|number} b\n */\nvar forceType = function forceType(a, b) {\n  return _typeof(a) !== _typeof(b) ? [String(a), String(b)] : [a, b];\n};\n\n/**\n * @param  {string} a\n * @param  {string} b\n * @returns number\n */\nvar compareStrings = function compareStrings(a, b) {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  var _forceType = forceType(tryParse(a), tryParse(b)),\n    _forceType2 = _slicedToArray(_forceType, 2),\n    ap = _forceType2[0],\n    bp = _forceType2[1];\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n/**\n * @param  {string|RegExpMatchArray} a\n * @param  {string|RegExpMatchArray} b\n * @returns number\n */\nvar compareSegments = function compareSegments(a, b) {\n  for (var i = 0; i < Math.max(a.length, b.length); i++) {\n    var r = compareStrings(a[i] || '0', b[i] || '0');\n    if (r !== 0) return r;\n  }\n  return 0;\n};\n/**\n * @param  {string} version\n * @returns RegExpMatchArray\n */\nvar validateAndParse = function validateAndParse(version) {\n  var _match$shift;\n  var match = version.match(semver);\n  match === null || match === void 0 ? void 0 : (_match$shift = match.shift) === null || _match$shift === void 0 ? void 0 : _match$shift.call(match);\n  return match;\n};\n\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nexport var compareVersions = function compareVersions(v1, v2) {\n  // validate input and split into segments\n  var n1 = validateAndParse(v1);\n  var n2 = validateAndParse(v2);\n\n  // pop off the patch\n  var p1 = n1.pop();\n  var p2 = n2.pop();\n\n  // validate numbers\n  var r = compareSegments(n1, n2);\n  if (r !== 0) return r;\n  if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n  return 0;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}