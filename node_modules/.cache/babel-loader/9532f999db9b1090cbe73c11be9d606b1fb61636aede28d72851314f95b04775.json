{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport dayjs from 'dayjs';\nimport get from \"rc-util/es/utils/get\";\nimport { isNil } from \"../isNil\";\nimport quarterOfYear from 'dayjs/plugin/quarterOfYear';\ndayjs.extend(quarterOfYear);\nexport var dateFormatterMap = {\n  time: 'HH:mm:ss',\n  timeRange: 'HH:mm:ss',\n  date: 'YYYY-MM-DD',\n  dateWeek: 'YYYY-wo',\n  dateMonth: 'YYYY-MM',\n  dateQuarter: 'YYYY-[Q]Q',\n  dateYear: 'YYYY',\n  dateRange: 'YYYY-MM-DD',\n  dateTime: 'YYYY-MM-DD HH:mm:ss',\n  dateTimeRange: 'YYYY-MM-DD HH:mm:ss'\n};\n/**\n * 判断是不是一个 object\n * @param  {any} o\n * @returns boolean\n */\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n/**\n * 判断是否是一个的简单的 object\n * @param  {{constructor:any}} o\n * @returns boolean\n */\nexport function isPlainObject(o) {\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  var ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  var prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\n/**\n *  一个比较hack的moment判断工具\n * @param  {any} value\n * @returns boolean\n */\nvar isMoment = function isMoment(value) {\n  return !!(value !== null && value !== void 0 && value._isAMomentObject);\n};\n\n/**\n * 根据不同的格式转化 dayjs\n * @param  {dayjs.Dayjs} value\n * @param  {string|((value:dayjs.Dayjs} dateFormatter\n * @param  {string} valueType\n */\nexport var convertMoment = function convertMoment(value, dateFormatter, valueType) {\n  if (!dateFormatter) {\n    return value;\n  }\n  if (dayjs.isDayjs(value) || isMoment(value)) {\n    if (dateFormatter === 'number') {\n      return value.valueOf();\n    }\n    if (dateFormatter === 'string') {\n      return value.format(dateFormatterMap[valueType] || 'YYYY-MM-DD HH:mm:ss');\n    }\n    if (typeof dateFormatter === 'string' && dateFormatter !== 'string') {\n      return value.format(dateFormatter);\n    }\n    if (typeof dateFormatter === 'function') {\n      return dateFormatter(value, valueType);\n    }\n  }\n  return value;\n};\n\n/**\n * 这里主要是来转化一下数据 将 dayjs 转化为 string 将 all 默认删除\n * @param  {T} value\n * @param  {DateFormatter} dateFormatter\n * @param  {Record<string} valueTypeMap\n * @param  {ProFieldValueType;dateFormat:string;}|any>} |{valueType\n * @param  {boolean} omitNil?\n * @param  {NamePath} parentKey?\n */\nexport var conversionMomentValue = function conversionMomentValue(value, dateFormatter, valueTypeMap, omitNil, parentKey) {\n  var tmpValue = {};\n  if (typeof window === 'undefined') return value;\n  // 如果 value 是 string | null | Blob类型 其中之一，直接返回\n  // 形如 {key: [File, File]} 的表单字段当进行第二次递归时会导致其直接越过 typeof value !== 'object' 这一判断 https://github.com/ant-design/pro-components/issues/2071\n  if (_typeof(value) !== 'object' || isNil(value) || value instanceof Blob || Array.isArray(value)) {\n    return value;\n  }\n  Object.keys(value).forEach(function (valueKey) {\n    var namePath = parentKey ? [parentKey, valueKey].flat(1) : [valueKey];\n    var valueFormatMap = get(valueTypeMap, namePath) || 'text';\n    var valueType = 'text';\n    var dateFormat;\n    if (typeof valueFormatMap === 'string') {\n      valueType = valueFormatMap;\n    } else if (valueFormatMap) {\n      valueType = valueFormatMap.valueType;\n      dateFormat = valueFormatMap.dateFormat;\n    }\n    var itemValue = value[valueKey];\n    if (isNil(itemValue) && omitNil) {\n      return;\n    }\n    // 处理嵌套的情况\n    if (isPlainObject(itemValue) &&\n    // 不是数组\n    !Array.isArray(itemValue) &&\n    // 不是 dayjs\n    !dayjs.isDayjs(itemValue) &&\n    // 不是 moment\n    !isMoment(itemValue)) {\n      tmpValue[valueKey] = conversionMomentValue(itemValue, dateFormatter, valueTypeMap, omitNil, [valueKey]);\n      return;\n    }\n    // 处理 FormList 的 value\n    if (Array.isArray(itemValue)) {\n      tmpValue[valueKey] = itemValue.map(function (arrayValue, index) {\n        if (dayjs.isDayjs(arrayValue) || isMoment(arrayValue)) {\n          return convertMoment(arrayValue, dateFormat || dateFormatter, valueType);\n        }\n        return conversionMomentValue(arrayValue, dateFormatter, valueTypeMap, omitNil, [valueKey, \"\".concat(index)].flat(1));\n      });\n      return;\n    }\n    tmpValue[valueKey] = convertMoment(itemValue, dateFormat || dateFormatter, valueType);\n  });\n  return tmpValue;\n};","map":{"version":3,"names":["_typeof","dayjs","get","isNil","quarterOfYear","extend","dateFormatterMap","time","timeRange","date","dateWeek","dateMonth","dateQuarter","dateYear","dateRange","dateTime","dateTimeRange","isObject","o","Object","prototype","toString","call","isPlainObject","ctor","constructor","undefined","prot","hasOwnProperty","isMoment","value","_isAMomentObject","convertMoment","dateFormatter","valueType","isDayjs","valueOf","format","conversionMomentValue","valueTypeMap","omitNil","parentKey","tmpValue","window","Blob","Array","isArray","keys","forEach","valueKey","namePath","flat","valueFormatMap","dateFormat","itemValue","map","arrayValue","index","concat"],"sources":["D:/LearnDeveloper/ReactJS/student-management-infor/node_modules/@ant-design/pro-utils/es/conversionMomentValue/index.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport dayjs from 'dayjs';\nimport get from \"rc-util/es/utils/get\";\nimport { isNil } from \"../isNil\";\nimport quarterOfYear from 'dayjs/plugin/quarterOfYear';\ndayjs.extend(quarterOfYear);\nexport var dateFormatterMap = {\n  time: 'HH:mm:ss',\n  timeRange: 'HH:mm:ss',\n  date: 'YYYY-MM-DD',\n  dateWeek: 'YYYY-wo',\n  dateMonth: 'YYYY-MM',\n  dateQuarter: 'YYYY-[Q]Q',\n  dateYear: 'YYYY',\n  dateRange: 'YYYY-MM-DD',\n  dateTime: 'YYYY-MM-DD HH:mm:ss',\n  dateTimeRange: 'YYYY-MM-DD HH:mm:ss'\n};\n/**\n * 判断是不是一个 object\n * @param  {any} o\n * @returns boolean\n */\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n/**\n * 判断是否是一个的简单的 object\n * @param  {{constructor:any}} o\n * @returns boolean\n */\nexport function isPlainObject(o) {\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  var ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  var prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\n/**\n *  一个比较hack的moment判断工具\n * @param  {any} value\n * @returns boolean\n */\nvar isMoment = function isMoment(value) {\n  return !!(value !== null && value !== void 0 && value._isAMomentObject);\n};\n\n/**\n * 根据不同的格式转化 dayjs\n * @param  {dayjs.Dayjs} value\n * @param  {string|((value:dayjs.Dayjs} dateFormatter\n * @param  {string} valueType\n */\nexport var convertMoment = function convertMoment(value, dateFormatter, valueType) {\n  if (!dateFormatter) {\n    return value;\n  }\n  if (dayjs.isDayjs(value) || isMoment(value)) {\n    if (dateFormatter === 'number') {\n      return value.valueOf();\n    }\n    if (dateFormatter === 'string') {\n      return value.format(dateFormatterMap[valueType] || 'YYYY-MM-DD HH:mm:ss');\n    }\n    if (typeof dateFormatter === 'string' && dateFormatter !== 'string') {\n      return value.format(dateFormatter);\n    }\n    if (typeof dateFormatter === 'function') {\n      return dateFormatter(value, valueType);\n    }\n  }\n  return value;\n};\n\n/**\n * 这里主要是来转化一下数据 将 dayjs 转化为 string 将 all 默认删除\n * @param  {T} value\n * @param  {DateFormatter} dateFormatter\n * @param  {Record<string} valueTypeMap\n * @param  {ProFieldValueType;dateFormat:string;}|any>} |{valueType\n * @param  {boolean} omitNil?\n * @param  {NamePath} parentKey?\n */\nexport var conversionMomentValue = function conversionMomentValue(value, dateFormatter, valueTypeMap, omitNil, parentKey) {\n  var tmpValue = {};\n  if (typeof window === 'undefined') return value;\n  // 如果 value 是 string | null | Blob类型 其中之一，直接返回\n  // 形如 {key: [File, File]} 的表单字段当进行第二次递归时会导致其直接越过 typeof value !== 'object' 这一判断 https://github.com/ant-design/pro-components/issues/2071\n  if (_typeof(value) !== 'object' || isNil(value) || value instanceof Blob || Array.isArray(value)) {\n    return value;\n  }\n  Object.keys(value).forEach(function (valueKey) {\n    var namePath = parentKey ? [parentKey, valueKey].flat(1) : [valueKey];\n    var valueFormatMap = get(valueTypeMap, namePath) || 'text';\n    var valueType = 'text';\n    var dateFormat;\n    if (typeof valueFormatMap === 'string') {\n      valueType = valueFormatMap;\n    } else if (valueFormatMap) {\n      valueType = valueFormatMap.valueType;\n      dateFormat = valueFormatMap.dateFormat;\n    }\n    var itemValue = value[valueKey];\n    if (isNil(itemValue) && omitNil) {\n      return;\n    }\n    // 处理嵌套的情况\n    if (isPlainObject(itemValue) &&\n    // 不是数组\n    !Array.isArray(itemValue) &&\n    // 不是 dayjs\n    !dayjs.isDayjs(itemValue) &&\n    // 不是 moment\n    !isMoment(itemValue)) {\n      tmpValue[valueKey] = conversionMomentValue(itemValue, dateFormatter, valueTypeMap, omitNil, [valueKey]);\n      return;\n    }\n    // 处理 FormList 的 value\n    if (Array.isArray(itemValue)) {\n      tmpValue[valueKey] = itemValue.map(function (arrayValue, index) {\n        if (dayjs.isDayjs(arrayValue) || isMoment(arrayValue)) {\n          return convertMoment(arrayValue, dateFormat || dateFormatter, valueType);\n        }\n        return conversionMomentValue(arrayValue, dateFormatter, valueTypeMap, omitNil, [valueKey, \"\".concat(index)].flat(1));\n      });\n      return;\n    }\n    tmpValue[valueKey] = convertMoment(itemValue, dateFormat || dateFormatter, valueType);\n  });\n  return tmpValue;\n};"],"mappings":"AAAA,OAAOA,OAAO,MAAM,mCAAmC;AACvD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,sBAAsB;AACtC,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,aAAa,MAAM,4BAA4B;AACtDH,KAAK,CAACI,MAAM,CAACD,aAAa,CAAC;AAC3B,OAAO,IAAIE,gBAAgB,GAAG;EAC5BC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAE,UAAU;EACrBC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE,SAAS;EACnBC,SAAS,EAAE,SAAS;EACpBC,WAAW,EAAE,WAAW;EACxBC,QAAQ,EAAE,MAAM;EAChBC,SAAS,EAAE,YAAY;EACvBC,QAAQ,EAAE,qBAAqB;EAC/BC,aAAa,EAAE;AACjB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,CAAC,EAAE;EACnB,OAAOC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,CAAC,CAAC,KAAK,iBAAiB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,aAAaA,CAACL,CAAC,EAAE;EAC/B,IAAID,QAAQ,CAACC,CAAC,CAAC,KAAK,KAAK,EAAE,OAAO,KAAK;;EAEvC;EACA,IAAIM,IAAI,GAAGN,CAAC,CAACO,WAAW;EACxB,IAAID,IAAI,KAAKE,SAAS,EAAE,OAAO,IAAI;;EAEnC;EACA,IAAIC,IAAI,GAAGH,IAAI,CAACJ,SAAS;EACzB,IAAIH,QAAQ,CAACU,IAAI,CAAC,KAAK,KAAK,EAAE,OAAO,KAAK;;EAE1C;EACA,IAAIA,IAAI,CAACC,cAAc,CAAC,eAAe,CAAC,KAAK,KAAK,EAAE;IAClD,OAAO,KAAK;EACd;;EAEA;EACA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,SAASA,QAAQA,CAACC,KAAK,EAAE;EACtC,OAAO,CAAC,EAAEA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,IAAIA,KAAK,CAACC,gBAAgB,CAAC;AACzE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,aAAa,GAAG,SAASA,aAAaA,CAACF,KAAK,EAAEG,aAAa,EAAEC,SAAS,EAAE;EACjF,IAAI,CAACD,aAAa,EAAE;IAClB,OAAOH,KAAK;EACd;EACA,IAAI7B,KAAK,CAACkC,OAAO,CAACL,KAAK,CAAC,IAAID,QAAQ,CAACC,KAAK,CAAC,EAAE;IAC3C,IAAIG,aAAa,KAAK,QAAQ,EAAE;MAC9B,OAAOH,KAAK,CAACM,OAAO,EAAE;IACxB;IACA,IAAIH,aAAa,KAAK,QAAQ,EAAE;MAC9B,OAAOH,KAAK,CAACO,MAAM,CAAC/B,gBAAgB,CAAC4B,SAAS,CAAC,IAAI,qBAAqB,CAAC;IAC3E;IACA,IAAI,OAAOD,aAAa,KAAK,QAAQ,IAAIA,aAAa,KAAK,QAAQ,EAAE;MACnE,OAAOH,KAAK,CAACO,MAAM,CAACJ,aAAa,CAAC;IACpC;IACA,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;MACvC,OAAOA,aAAa,CAACH,KAAK,EAAEI,SAAS,CAAC;IACxC;EACF;EACA,OAAOJ,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIQ,qBAAqB,GAAG,SAASA,qBAAqBA,CAACR,KAAK,EAAEG,aAAa,EAAEM,YAAY,EAAEC,OAAO,EAAEC,SAAS,EAAE;EACxH,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE,OAAOb,KAAK;EAC/C;EACA;EACA,IAAI9B,OAAO,CAAC8B,KAAK,CAAC,KAAK,QAAQ,IAAI3B,KAAK,CAAC2B,KAAK,CAAC,IAAIA,KAAK,YAAYc,IAAI,IAAIC,KAAK,CAACC,OAAO,CAAChB,KAAK,CAAC,EAAE;IAChG,OAAOA,KAAK;EACd;EACAX,MAAM,CAAC4B,IAAI,CAACjB,KAAK,CAAC,CAACkB,OAAO,CAAC,UAAUC,QAAQ,EAAE;IAC7C,IAAIC,QAAQ,GAAGT,SAAS,GAAG,CAACA,SAAS,EAAEQ,QAAQ,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,GAAG,CAACF,QAAQ,CAAC;IACrE,IAAIG,cAAc,GAAGlD,GAAG,CAACqC,YAAY,EAAEW,QAAQ,CAAC,IAAI,MAAM;IAC1D,IAAIhB,SAAS,GAAG,MAAM;IACtB,IAAImB,UAAU;IACd,IAAI,OAAOD,cAAc,KAAK,QAAQ,EAAE;MACtClB,SAAS,GAAGkB,cAAc;IAC5B,CAAC,MAAM,IAAIA,cAAc,EAAE;MACzBlB,SAAS,GAAGkB,cAAc,CAAClB,SAAS;MACpCmB,UAAU,GAAGD,cAAc,CAACC,UAAU;IACxC;IACA,IAAIC,SAAS,GAAGxB,KAAK,CAACmB,QAAQ,CAAC;IAC/B,IAAI9C,KAAK,CAACmD,SAAS,CAAC,IAAId,OAAO,EAAE;MAC/B;IACF;IACA;IACA,IAAIjB,aAAa,CAAC+B,SAAS,CAAC;IAC5B;IACA,CAACT,KAAK,CAACC,OAAO,CAACQ,SAAS,CAAC;IACzB;IACA,CAACrD,KAAK,CAACkC,OAAO,CAACmB,SAAS,CAAC;IACzB;IACA,CAACzB,QAAQ,CAACyB,SAAS,CAAC,EAAE;MACpBZ,QAAQ,CAACO,QAAQ,CAAC,GAAGX,qBAAqB,CAACgB,SAAS,EAAErB,aAAa,EAAEM,YAAY,EAAEC,OAAO,EAAE,CAACS,QAAQ,CAAC,CAAC;MACvG;IACF;IACA;IACA,IAAIJ,KAAK,CAACC,OAAO,CAACQ,SAAS,CAAC,EAAE;MAC5BZ,QAAQ,CAACO,QAAQ,CAAC,GAAGK,SAAS,CAACC,GAAG,CAAC,UAAUC,UAAU,EAAEC,KAAK,EAAE;QAC9D,IAAIxD,KAAK,CAACkC,OAAO,CAACqB,UAAU,CAAC,IAAI3B,QAAQ,CAAC2B,UAAU,CAAC,EAAE;UACrD,OAAOxB,aAAa,CAACwB,UAAU,EAAEH,UAAU,IAAIpB,aAAa,EAAEC,SAAS,CAAC;QAC1E;QACA,OAAOI,qBAAqB,CAACkB,UAAU,EAAEvB,aAAa,EAAEM,YAAY,EAAEC,OAAO,EAAE,CAACS,QAAQ,EAAE,EAAE,CAACS,MAAM,CAACD,KAAK,CAAC,CAAC,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC;MACtH,CAAC,CAAC;MACF;IACF;IACAT,QAAQ,CAACO,QAAQ,CAAC,GAAGjB,aAAa,CAACsB,SAAS,EAAED,UAAU,IAAIpB,aAAa,EAAEC,SAAS,CAAC;EACvF,CAAC,CAAC;EACF,OAAOQ,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}