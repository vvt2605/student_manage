[{"D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\index.js":"1","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\reportWebVitals.js":"2","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\App.js":"3","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\addStudent.jsx":"4","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\student.jsx":"5","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\content.jsx":"6","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\listStudent.jsx":"7"},{"size":535,"mtime":1681654357278,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1681654357359,"results":"10","hashOfConfig":"9"},{"size":8980,"mtime":1683824670666,"results":"11","hashOfConfig":"9"},{"size":3448,"mtime":1683184576002,"results":"12","hashOfConfig":"9"},{"size":13979,"mtime":1683705464205,"results":"13","hashOfConfig":"9"},{"size":3769,"mtime":1683705298073,"results":"14","hashOfConfig":"9"},{"size":1678,"mtime":1682459241140,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xggot5",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\index.js",[],[],"D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\reportWebVitals.js",[],[],"D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\App.js",["41","42"],[],"\nimport { Fragment } from 'react'\nimport { Disclosure, Menu, Transition } from '@headlessui/react'\nimport { Bars3Icon, BellIcon, XMarkIcon } from '@heroicons/react/24/outline'\nimport './App.css';\nimport Student from './student';\nimport AddStudent from './addStudent';\nimport Content from './content';\n\n\n\nconst user = {\n  name: 'Tom Cook',\n  email: 'tom@example.com',\n  imageUrl:\n    'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80',\n}\nconst navigation = [\n  { name: 'Student', href: '#', current: true },\n  { name: 'Team', href: '#', current: false },\n  { name: 'Projects', href: '#', current: false },\n  { name: 'Calendar', href: '#', current: false },\n  { name: 'Reports', href: '#', current: false },\n]\nconst userNavigation = [\n  { name: 'Your Profile', href: '#' },\n  { name: 'Settings', href: '#' },\n  { name: 'Sign out', href: '#' },\n]\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ')\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"min-h-full\">\n        <Disclosure as=\"nav\" className=\"bg-gray-800\">\n          {({ open }) => (\n            <>\n              <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n                <div className=\"flex h-16 items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <img\n                        className=\"h-8 w-8\"\n                        src=\"https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=500\"\n                        alt=\"Your Company\"\n                      />\n                    </div>\n                    <div className=\"hidden md:block\">\n                      <div className=\"ml-10 flex items-baseline space-x-4\">\n                        {navigation.map((item) => (\n                          <a\n                            key={item.name}\n                            href={item.href}\n                            className={classNames(\n                              item.current\n                                ? 'bg-gray-900 text-white'\n                                : 'text-gray-300 hover:bg-gray-700 hover:text-white',\n                              'rounded-md px-3 py-2 text-sm font-medium'\n                            )}\n                            aria-current={item.current ? 'page' : undefined}\n                          >\n                            {item.name}\n                          </a>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"hidden md:block\">\n                    <div className=\"ml-4 flex items-center md:ml-6\">\n                      <button\n                        type=\"button\"\n                        className=\"rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\"\n                      >\n                        <span className=\"sr-only\">View notifications</span>\n                        <BellIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                      </button>\n\n                      {/* Profile dropdown */}\n                      <Menu as=\"div\" className=\"relative ml-3\">\n                        <div>\n                          <Menu.Button className=\"flex max-w-xs items-center rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\">\n                            <span className=\"sr-only\">Open user menu</span>\n                            <img className=\"h-8 w-8 rounded-full\" src={user.imageUrl} alt=\"\" />\n                          </Menu.Button>\n                        </div>\n                        <Transition\n                          as={Fragment}\n                          enter=\"transition ease-out duration-100\"\n                          enterFrom=\"transform opacity-0 scale-95\"\n                          enterTo=\"transform opacity-100 scale-100\"\n                          leave=\"transition ease-in duration-75\"\n                          leaveFrom=\"transform opacity-100 scale-100\"\n                          leaveTo=\"transform opacity-0 scale-95\"\n                        >\n                          <Menu.Items className=\"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                            {userNavigation.map((item) => (\n                              <Menu.Item key={item.name}>\n                                {({ active }) => (\n                                  <a\n                                    href={item.href}\n                                    className={classNames(\n                                      active ? 'bg-gray-100' : '',\n                                      'block px-4 py-2 text-sm text-gray-700'\n                                    )}\n                                  >\n                                    {item.name}\n                                  </a>\n                                )}\n                              </Menu.Item>\n                            ))}\n                          </Menu.Items>\n                        </Transition>\n                      </Menu>\n                    </div>\n                  </div>\n                  <div className=\"-mr-2 flex md:hidden\">\n                    {/* Mobile menu button */}\n                    <Disclosure.Button className=\"inline-flex items-center justify-center rounded-md bg-gray-800 p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\">\n                      <span className=\"sr-only\">Open main menu</span>\n                      {open ? (\n                        <XMarkIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                      ) : (\n                        <Bars3Icon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                      )}\n                    </Disclosure.Button>\n                  </div>\n                </div>\n              </div>\n\n              <Disclosure.Panel className=\"md:hidden\">\n                <div className=\"space-y-1 px-2 pb-3 pt-2 sm:px-3\">\n                  {navigation.map((item) => (\n                    <Disclosure.Button\n                      key={item.name}\n                      as=\"a\"\n                      href={item.href}\n                      className={classNames(\n                        item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',\n                        'block rounded-md px-3 py-2 text-base font-medium'\n                      )}\n                      aria-current={item.current ? 'page' : undefined}\n                    >\n                      {item.name}\n                    </Disclosure.Button>\n                  ))}\n                </div>\n                <div className=\"border-t border-gray-700 pb-3 pt-4\">\n                  <div className=\"flex items-center px-5\">\n                    <div className=\"flex-shrink-0\">\n                      <img className=\"h-10 w-10 rounded-full\" src={user.imageUrl} alt=\"\" />\n                    </div>\n                    <div className=\"ml-3\">\n                      <div className=\"text-base font-medium leading-none text-white\">{user.name}</div>\n                      <div className=\"text-sm font-medium leading-none text-gray-400\">{user.email}</div>\n                    </div>\n                    <button\n                      type=\"button\"\n                      className=\"ml-auto flex-shrink-0 rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\"\n                    >\n                      <span className=\"sr-only\">View notifications</span>\n                      <BellIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                    </button>\n                  </div>\n                  <div className=\"mt-3 space-y-1 px-2\">\n                    {userNavigation.map((item) => (\n                      <Disclosure.Button\n                        key={item.name}\n                        as=\"a\"\n                        href={item.href}\n                        className=\"block rounded-md px-3 py-2 text-base font-medium text-gray-400 hover:bg-gray-700 hover:text-white\"\n                      >\n                        {item.name}\n                      </Disclosure.Button>\n                    ))}\n                  </div>\n                </div>\n              </Disclosure.Panel>\n            </>\n          )}\n        </Disclosure>\n\n        <header className=\"bg-white shadow\">\n\n        </header>\n        <main>\n          <div className=\"mx-auto max-w-7xl py-6 sm:px-6 lg:px-8\">{<Student />}</div>\n\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\addStudent.jsx",["43"],[],"\r\nimport { Button, Modal, Form, Input } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport tableListStudent from \"./listStudent\";\r\n\r\nfunction AddStudent() {\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Form submitted:', values);\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n\r\n        return (\r\n            <> <div className=\"absolute top-0 right-0 left-0 bottom-0 backdrop-filter backdrop-blur-sm flex justify-center items-center h-screen \">\r\n\r\n               \r\n                <Button type=\"primary\" onClick={showModal}>\r\n                    Open Form\r\n                </Button>\r\n                <Modal\r\n                    title=\"My Form\"\r\n                    visible={isModalVisible}\r\n                    onOk={handleOk}\r\n                    onCancel={handleCancel}\r\n                    footer={[\r\n                        <Button key=\"cancel\" onClick={handleCancel}>\r\n                            Cancel\r\n                        </Button>,\r\n                        <Button key=\"submit\" type=\"primary\" form=\"myForm\" htmlType=\"submit\">\r\n                            Submit\r\n                        </Button>,\r\n                    ]}\r\n                >\r\n                    <Form id=\"myForm\" onFinish={onFinish}>\r\n                        <p>Register New Student</p>\r\n                        <Form.Item className=\"w-10/12 my-1\" name=\"name\">\r\n                            Name\r\n                            <Input placeholder=\"Name\" type=\"text\" />\r\n                        </Form.Item>\r\n                        <Form.Item className=\"w-10/12 my-1\" name=\"dob\">\r\n                            Day of birthday\r\n                            <Input placeholder=\"Day of birthday \" type=\"date\" />\r\n                        </Form.Item>\r\n                        <Form.Item className=\"w-10/12 my-1\" name=\"gender\">\r\n                            Gender\r\n                            <Input placeholder=\"Gender\" />\r\n                        </Form.Item>\r\n                        <Form.Item className=\"w-10/12 my-1\" name=\"class\">Class\r\n                            <Input placeholder=\"Class\" />\r\n                        </Form.Item>\r\n                        <Form.Item className=\"w-10/12 my-1\" name=\"phone\">Phone Number\r\n                            <Input placeholder=\"Phone Number\" />\r\n                        </Form.Item>\r\n                        <Form.Item className=\"w-10/12 my-1\" name=\"hometown\">Hometown\r\n                            <Input placeholder=\"Hometown\" />\r\n                        </Form.Item>\r\n                        <Form.Item className=\"w-10/12 my-1\" name=\"subject\">Subject \r\n                            <Input placeholder=\"Subject\" />\r\n                        </Form.Item>\r\n                        {/* <Form.Item>\r\n                            <Button className=\"my-1.5 \"  htmlType=\"submit \">Submit</Button>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button className=\"my-1.5 \"  >Cancel</Button>\r\n                        </Form.Item> */}\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n\r\n            </>\r\n        );\r\n\r\n}\r\nexport default AddStudent;\r\n","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\student.jsx",["44","45","46","47","48"],[],"import { Button, Modal, Form, Input, Table, Popconfirm, Typography, InputNumber } from \"antd\";\r\nimport { AudioOutlined } from '@ant-design/icons';\r\nimport { useState } from \"react\";\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport AddStudent from \"./addStudent\";\r\nimport tableListStudent from \"./listStudent\";\r\n\r\n\r\nfunction Student() {\r\n    const { Search } = Input;\r\n\r\n    // let listStudent = tableListStudent;\r\n    let totalStudent = tableListStudent.length\r\n    for (let i = 0; i < tableListStudent.length; i++) {\r\n        tableListStudent[i].index = i + 1;\r\n\r\n    }\r\n    // edit activiti\r\n    const EditableCell = ({\r\n        editing,\r\n        dataIndex,\r\n        title,\r\n        inputType,\r\n        record,\r\n        index,\r\n        children,\r\n        ...restProps\r\n    }) => {\r\n        const inputNode = inputType === \"number\" ? <InputNumber /> : <Input />\r\n\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ? (\r\n                    <Form.Item\r\n                        name={dataIndex}\r\n                        style={{ margin: 0 }}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: `Please Input ${title}!`\r\n                            }\r\n                        ]}\r\n                    >\r\n                        {inputNode}\r\n                    </Form.Item>\r\n                ) : (\r\n                    children\r\n                )}\r\n            </td>\r\n        )\r\n    }\r\n    const [editingKey, setEditingKey] = useState('');\r\n\r\n    const isEditing = record => record.index === editingKey\r\n\r\n    const edit = record => {\r\n        form.setFieldsValue({ name: \"\", dob: \"\", gender: \"\", class: \"\", hometown: \"\", phone: \"\", ...record })\r\n        setEditingKey(record.index)\r\n    }\r\n\r\n    const cancel = () => {\r\n        setEditingKey('');\r\n    };\r\n\r\n    const save = async key => {\r\n        try {\r\n            const row = await form.validateFields()\r\n\r\n            const newData = [...tableListStudentArray]\r\n            const index = newData.findIndex(item => key === item.index)\r\n            if (index > -1) {\r\n                const item = newData[index]\r\n                newData.splice(index, 1, {\r\n                    ...item,\r\n                    ...row\r\n                })\r\n                settableListStudent(newData)\r\n                setEditingKey(\"\")\r\n                form.resetFields();\r\n            } else {\r\n                newData.push(row)\r\n                settableListStudent(newData)\r\n                setEditingKey(\"\")\r\n                form.resetFields();\r\n            }\r\n        } catch (errInfo) {\r\n            console.log(\"Validate Failed:\", errInfo)\r\n        }\r\n    }\r\n\r\n    // seetting for search\r\n    const suffix = (\r\n        <AudioOutlined\r\n            style={{\r\n\r\n                fontSize: 16,\r\n                color: '#1890ff',\r\n            }}\r\n        />\r\n    );\r\n\r\n\r\n    const columns = [\r\n\r\n        {\r\n            title: \"Name\",\r\n            dataIndex: \"name\",\r\n            width: 170,\r\n            align: \"left\",\r\n            editable: true\r\n\r\n            // render: _ => <a>{_}</a>,\r\n        },\r\n        {\r\n            title: \"Day of birth\",\r\n            dataIndex: \"dob\",\r\n            align: \"center\",\r\n            width: 150,\r\n            editable: true\r\n\r\n        },\r\n        {\r\n            title: \"Gender\",\r\n            dataIndex: \"gender\",\r\n            align: \"center\",\r\n            width: 150,\r\n            editable: true\r\n        },\r\n        {\r\n            title: \"Class\",\r\n            dataIndex: \"class\",\r\n            align: \"center\",\r\n            width: 150,\r\n            editable: true\r\n        },\r\n        {\r\n            title: \"Hometown\",\r\n            dataIndex: \"hometown\",\r\n            align: \"center\",\r\n            width: 150,\r\n            editable: true\r\n        },\r\n        {\r\n            title: \"Phone Number\",\r\n            dataIndex: \"phone\",\r\n            align: \"center\",\r\n            width: 150,\r\n            editable: true\r\n        },\r\n\r\n        {\r\n            title: \"Actions\",\r\n            align: \"center\",\r\n            key: \"option\",\r\n            width: 150,\r\n            valueType: \"option\",\r\n            render: (text, record) => [\r\n\r\n                listStudent.length >= 1 ? (\r\n                    <Popconfirm\r\n                        title=\"Sure to delete?\"\r\n                        onConfirm={() => handleDelete(record.index)}\r\n                    >\r\n                        <a>Delete</a>\r\n                    </Popconfirm>\r\n                ) : null,\r\n\r\n            ]\r\n        },\r\n        {title: \"Actions\",\r\n            render: (_, record) => {\r\n                const editable = isEditing(record)\r\n                return editable ? (\r\n                  <span>\r\n                    <Typography.Link\r\n                      onClick={() => save(record.index)}\r\n                      style={{ marginRight: 8 }}\r\n                    >\r\n                      Save\r\n                    </Typography.Link>\r\n                    <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n                      <a>Cancel</a>\r\n                    </Popconfirm>\r\n                  </span>\r\n                ) : (\r\n                  <Typography.Link\r\n                    disabled={editingKey !== \"\"}\r\n                    onClick={() => edit(record)}\r\n                  >\r\n                    Edit\r\n                  </Typography.Link>\r\n                )\r\n              }\r\n\r\n        }\r\n    ]\r\n    // action delete\r\n    const handleDelete = (index) => {\r\n\r\n        const newData = tableListStudentArray.filter(item => item.index !== index)\r\n        settableListStudent(newData);\r\n\r\n    }\r\n    const [form] = Form.useForm();\r\n    const [form1] = Form.useForm();\r\n\r\n    const [searchText, setSearchText] = useState('');\r\n    const [listStudent, setListStudent] = useState(tableListStudent)\r\n\r\n\r\n    const [tableListStudentArray, settableListStudent] = useState(listStudent)\r\n\r\n\r\n\r\n\r\n\r\n    // active modal\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [isError, setIsError] = useState(false)\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        form1.submit();\r\n        form1.resetFields();\r\n        setIsError(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        form1.resetFields();\r\n        setIsError(false);\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const onFinish = (values) => {\r\n        console.log(\"finish success\");\r\n        if (values.name === undefined || values.dob === undefined || values.gender === undefined || values.class === undefined || values.phone === undefined || values.hometown === undefined) {\r\n            console.log(\"Error\");\r\n            setIsError(true);\r\n            setIsModalVisible(true);\r\n        } else {\r\n            const newStudent = {\r\n                ...values,\r\n                index: totalStudent + 1\r\n            }\r\n\r\n            tableListStudentArray.push(newStudent);\r\n            settableListStudent(tableListStudentArray);\r\n            totalStudent = totalStudent + 1;\r\n            console.log(\"PASS\");\r\n            setIsError(false);\r\n            form.resetFields();\r\n            setIsModalVisible(false);\r\n        }\r\n\r\n\r\n\r\n    };\r\n    const mergedColumns = columns.map(col => {\r\n        if (!col.editable) {\r\n            return col\r\n        }\r\n        return {\r\n            ...col,\r\n            onCell: record => ({\r\n                record,\r\n                inputType: col.dataIndex === \"text\",\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                editing: isEditing(record)\r\n            })\r\n        }\r\n    })\r\n    return (\r\n        <div classname=\"studentContainer\">\r\n\r\n            <div className=\"justify-between flex\">\r\n\r\n\r\n\r\n                {/* search activities */}\r\n                <Search className=\"w-80\"\r\n                    placeholder=\"Search in here...\"\r\n                    enterButton={\r\n                        <Button\r\n                            style={{\r\n                                color: \"#fff\",\r\n                                backgroundColor: \"#1677ff\",\r\n                                boxShadow: \"0 2px 0 rgba(5, 145, 255, 0.1)\"\r\n                            }} >\r\n                            Search\r\n                        </Button>\r\n\r\n                    }\r\n                    value={searchText}\r\n                    onChange={(e) => {\r\n                        var text = e.target.value;\r\n\r\n                        return setSearchText(text)\r\n                    }}\r\n                    onPressEnter={(value) => setSearchText(value)}\r\n\r\n                    size=\"large\"\r\n                    suffix={suffix}\r\n                />\r\n\r\n                {/* add new student button */}\r\n                <Button className=\"mr-12\" onClick={showModal}>\r\n                    Add New Student\r\n                </Button>\r\n\r\n\r\n            </div>\r\n            <Modal\r\n                title=\"Register New Student\"\r\n                open={isModalVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n\r\n                footer={[\r\n                    <Button key=\"back\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </Button>,\r\n                    <Button key=\"submit\" onClick={() => form1.submit()}>\r\n                        Submit\r\n                    </Button>,\r\n                ]}\r\n            >\r\n                <Form form={form1} onFinish={onFinish} >\r\n                    <Form.Item name=\"name\" label=\"Name\" rules={[\r\n                            {\r\n                                required: true,\r\n                                message: `Please Input name!`\r\n                            }\r\n                        ]}>\r\n                        <Input placeholder=\"Name\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"dob\" label=\"Day of birthday\"rules={[\r\n                            {\r\n                                required: true,\r\n                                message: `Please Input dOb!`\r\n                            }\r\n                        ]}>\r\n                        <Input placeholder=\"Day of birthday\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"gender\" label=\"Gender\" rules={[\r\n                            {\r\n                                required: true,\r\n                                message: `Please Input gender!`\r\n                            }\r\n                        ]}>\r\n                        <Input placeholder=\"Gender\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"class\" label=\"Class\"rules={[\r\n                            {\r\n                                required: true,\r\n                                message: `Please Input class!`\r\n                            }\r\n                        ]}>\r\n                        <Input placeholder=\"Class\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"hometown\" label=\"Hometown\"rules={[\r\n                            {\r\n                                required: true,\r\n                                message: `Please Input hometown!`\r\n                            }\r\n                        ]}>\r\n                        <Input placeholder=\"Hometown\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"phone\" label=\"Phone Number\"rules={[\r\n                            {\r\n                                required: true,\r\n                                message: `Please Input phone!`\r\n                            }\r\n                        ]}>\r\n                        <Input placeholder=\"Phone Number\" />\r\n                    </Form.Item>\r\n\r\n                </Form>\r\n                {isError && (<p className=\"text-red-500\" >Vui lòng nhập đầy đủ  thông tin!!</p>)}\r\n\r\n\r\n            </Modal>\r\n            {/* table student */}\r\n            <Form form={form} component={false}>\r\n                <Table\r\n                    components={{\r\n                        body: {\r\n                            cell: EditableCell\r\n                        }\r\n                    }}\r\n                    columns={mergedColumns}\r\n                    onDelete={(index) => handleDelete(index)}\r\n                    rowClassName=\"editable-row\"\r\n\r\n                    dataSource={tableListStudentArray.filter((item) => item.name.toLowerCase().replace(/[àáảãạâầấẩẫậăằắẳẵặ]/g, \"a\")\r\n                        .replace(/[èéẻẽẹêềếểễệ]/g, \"e\")\r\n                        .replace(/[ìíỉĩị]/g, \"i\")\r\n                        .replace(/[òóỏõọôồốổỗộơờớởỡợ]/g, \"o\")\r\n                        .replace(/[ùúủũụưừứửữự]/g, \"u\")\r\n                        .replace(/[ỳýỷỹỵ]/g, \"y\")\r\n                        .replace(/[đ]/g, \"d\")\r\n                        .replace(/\\s+/g, \" \")\r\n                        .replace(/[^A-Za-z0-9 ]/g, \"\").includes(searchText.toLowerCase().replace(/[àáảãạâầấẩẫậăằắẳẵặ]/g, \"a\")\r\n                            .replace(/[èéẻẽẹêềếểễệ]/g, \"e\")\r\n                            .replace(/[ìíỉĩị]/g, \"i\")\r\n                            .replace(/[òóỏõọôồốổỗộơờớởỡợ]/g, \"o\")\r\n                            .replace(/[ùúủũụưừứửữự]/g, \"u\")\r\n                            .replace(/[ỳýỷỹỵ]/g, \"y\")\r\n                            .replace(/[đ]/g, \"d\")\r\n                            .replace(/\\s+/g, \" \")\r\n                            .replace(/[^A-Za-z0-9 ]/g, \"\")))}\r\n                    pagination={{\r\n                        showTotal: (total, range) => ` ${range[0]}-${range[1]}/ Tổng ${total}`,\r\n                        defaultPageSize: 6,\r\n                    }}\r\n                    \r\n\r\n\r\n\r\n                />\r\n            </Form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\nexport default Student\r\n","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\content.jsx",["49"],[],"import React, { useState } from \"react\"\r\nimport \"./index.css\"\r\nimport { Form, Input, InputNumber, Popconfirm, Table, Typography } from \"antd\"\r\n\r\nconst originData = []\r\nfor (let i = 0; i < 100; i++) {\r\n  originData.push({\r\n    key: i.toString(),\r\n    name: `Edward ${i}`,\r\n    age: 32,\r\n    address: `London Park no. ${i}`\r\n  })\r\n}\r\n\r\nconst EditableCell = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const inputNode = inputType === \"number\" ? <InputNumber /> : <Input />\r\n\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{ margin: 0 }}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: `Please Input ${title}!`\r\n            }\r\n          ]}\r\n        >\r\n          {inputNode}\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  )\r\n}\r\n    \r\nconst Content = () => {\r\n  const [form] = Form.useForm()\r\n  const [data, setData] = useState(originData)\r\n  const [editingKey, setEditingKey] = useState(\"\")\r\n\r\n  const isEditing = record => record.key === editingKey\r\n\r\n  const edit = record => {\r\n    form.setFieldsValue({ name: \"\", age: \"\", address: \"\", ...record })\r\n    setEditingKey(record.key)\r\n  }\r\n\r\n  const cancel = () => {\r\n    setEditingKey(\"\")\r\n  }\r\n\r\n  const save = async key => {\r\n    try {\r\n      const row = await form.validateFields()\r\n\r\n      const newData = [...data]\r\n      const index = newData.findIndex(item => key === item.key)\r\n      if (index > -1) {\r\n        const item = newData[index]\r\n        newData.splice(index, 1, {\r\n          ...item,\r\n          ...row\r\n        })\r\n        setData(newData)\r\n        setEditingKey(\"\")\r\n      } else {\r\n        newData.push(row)\r\n        setData(newData)\r\n        setEditingKey(\"\")\r\n      }\r\n    } catch (errInfo) {\r\n      console.log(\"Validate Failed:\", errInfo)\r\n    }\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: \"name\",\r\n      dataIndex: \"name\",\r\n      width: \"25%\",\r\n      editable: true\r\n    },\r\n    {\r\n      title: \"age\",\r\n      dataIndex: \"age\",\r\n      width: \"15%\",\r\n      editable: true\r\n    },\r\n    {\r\n      title: \"address\",\r\n      dataIndex: \"address\",\r\n      width: \"40%\",\r\n      editable: true\r\n    },\r\n    {\r\n      title: \"operation\",\r\n      dataIndex: \"operation\",\r\n      render: (_, record) => {\r\n        const editable = isEditing(record)\r\n        return editable ? (\r\n          <span>\r\n            <Typography.Link\r\n              onClick={() => save(record.key)}\r\n              style={{ marginRight: 8 }}\r\n            >\r\n              Save\r\n            </Typography.Link>\r\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n              <a>Cancel</a>\r\n            </Popconfirm>\r\n          </span>\r\n        ) : (\r\n          <Typography.Link\r\n            disabled={editingKey !== \"\"}\r\n            onClick={() => edit(record)}\r\n          >\r\n            Edit\r\n          </Typography.Link>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  const mergedColumns = columns.map(col => {\r\n    if (!col.editable) {\r\n      return col\r\n    }\r\n    return {\r\n      ...col,\r\n      onCell: record => ({\r\n        record,\r\n        inputType: col.dataIndex === \"text\",\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record)\r\n      })\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <Table\r\n        components={{\r\n          body: {\r\n            cell: EditableCell\r\n          }\r\n        }}\r\n        bordered\r\n        dataSource={data}\r\n        columns={mergedColumns}\r\n        rowClassName=\"editable-row\"\r\n        pagination={{\r\n          onChange: cancel\r\n        }}\r\n      />\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default Content\r\n","D:\\LearnDeveloper\\ReactJS\\student_manage_infor\\src\\listStudent.jsx",[],[],{"ruleId":"50","severity":1,"message":"51","line":7,"column":8,"nodeType":"52","messageId":"53","endLine":7,"endColumn":18},{"ruleId":"50","severity":1,"message":"54","line":8,"column":8,"nodeType":"52","messageId":"53","endLine":8,"endColumn":15},{"ruleId":"50","severity":1,"message":"55","line":4,"column":8,"nodeType":"52","messageId":"53","endLine":4,"endColumn":24},{"ruleId":"50","severity":1,"message":"56","line":4,"column":10,"nodeType":"52","messageId":"53","endLine":4,"endColumn":24},{"ruleId":"50","severity":1,"message":"51","line":5,"column":8,"nodeType":"52","messageId":"53","endLine":5,"endColumn":18},{"ruleId":"57","severity":1,"message":"58","line":164,"column":25,"nodeType":"59","endLine":164,"endColumn":28},{"ruleId":"57","severity":1,"message":"58","line":182,"column":23,"nodeType":"59","endLine":182,"endColumn":26},{"ruleId":"50","severity":1,"message":"60","line":208,"column":25,"nodeType":"52","messageId":"53","endLine":208,"endColumn":39},{"ruleId":"57","severity":1,"message":"58","line":122,"column":15,"nodeType":"59","endLine":122,"endColumn":18},"no-unused-vars","'AddStudent' is defined but never used.","Identifier","unusedVar","'Content' is defined but never used.","'tableListStudent' is defined but never used.","'SearchOutlined' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setListStudent' is assigned a value but never used."]