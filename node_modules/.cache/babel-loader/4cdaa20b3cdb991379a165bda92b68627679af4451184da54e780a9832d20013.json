{"ast":null,"code":"/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp;\nmodule.exports.parse = parse;\nmodule.exports.compile = compile;\nmodule.exports.tokensToFunction = tokensToFunction;\nmodule.exports.tokensToRegExp = tokensToRegExp;\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/';\nvar DEFAULT_DELIMITERS = './';\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n// Match escaped characters that would otherwise appear in future matches.\n// This allows the user to escape special characters that won't transform.\n'(\\\\\\\\.)',\n// Match Express-style parameters and un-named parameters with a prefix\n// and optional suffixes. Matches appear as:\n//\n// \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n// \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n'(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse(str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || DEFAULT_DELIMITER;\n  var delimiters = options && options.delimiters || DEFAULT_DELIMITERS;\n  var pathEscaped = false;\n  var res;\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      pathEscaped = true;\n      continue;\n    }\n    var prev = '';\n    var next = str[index];\n    var name = res[2];\n    var capture = res[3];\n    var group = res[4];\n    var modifier = res[5];\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1;\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k];\n        path = path.slice(0, k);\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n      pathEscaped = false;\n    }\n    var partial = prev !== '' && next !== undefined && next !== prev;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = prev || defaultDelimiter;\n    var pattern = capture || group;\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    });\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index));\n  }\n  return tokens;\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options));\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction(tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n  return function (data, options) {\n    var path = '';\n    var encode = options && options.encode || encodeURIComponent;\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      if (typeof token === 'string') {\n        path += token;\n        continue;\n      }\n      var value = data ? data[token.name] : undefined;\n      var segment;\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array');\n        }\n        if (value.length === 0) {\n          if (token.optional) continue;\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty');\n        }\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token);\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"');\n          }\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n        continue;\n      }\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token);\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"');\n        }\n        path += token.prefix + segment;\n        continue;\n      }\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix;\n        continue;\n      }\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'));\n    }\n    return path;\n  };\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup(group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1');\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags(options) {\n  return options && options.sensitive ? '' : 'i';\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp(path, keys) {\n  if (!keys) return path;\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      });\n    }\n  }\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp(path, keys, options) {\n  var parts = [];\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options);\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp(tokens, keys, options) {\n  options = options || {};\n  var strict = options.strict;\n  var start = options.start !== false;\n  var end = options.end !== false;\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER);\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS;\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');\n  var route = start ? '^' : '';\n  var isEndDelimited = tokens.length === 0;\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    if (typeof token === 'string') {\n      route += escapeString(token);\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1;\n    } else {\n      var capture = token.repeat ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*' : token.pattern;\n      if (keys) keys.push(token);\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?';\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?';\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')';\n      }\n    }\n  }\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?';\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?';\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')';\n  }\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys);\n  }\n  if (Array.isArray(path)) {\n    return arrayToRegexp( /** @type {!Array} */path, keys, options);\n  }\n  return stringToRegexp( /** @type {string} */path, keys, options);\n}","map":{"version":3,"names":["module","exports","pathToRegexp","parse","compile","tokensToFunction","tokensToRegExp","DEFAULT_DELIMITER","DEFAULT_DELIMITERS","PATH_REGEXP","RegExp","join","str","options","tokens","key","index","path","defaultDelimiter","delimiter","delimiters","pathEscaped","res","exec","m","escaped","offset","slice","length","prev","next","name","capture","group","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","prefix","escapeGroup","escapeString","substr","matches","Array","i","data","encode","encodeURIComponent","token","value","segment","isArray","TypeError","j","test","String","replace","flags","sensitive","regexpToRegexp","keys","groups","source","match","arrayToRegexp","parts","stringToRegexp","strict","start","end","endsWith","concat","map","route","isEndDelimited"],"sources":["D:/LearnDeveloper/ReactJS/student-management-infor/node_modules/@ant-design/pro-layout/node_modules/path-to-regexp/index.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n  var isEndDelimited = tokens.length === 0\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}